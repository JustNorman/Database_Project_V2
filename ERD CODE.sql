CREATE TABLE EMPLOYEE ( --WORKS
    EMP_ID INT PRIMARY KEY,
    EMP_FNAME VARCHAR(50) NOT NULL,
    EMP_LNAME VARCHAR(50) NOT NULL,
    EMP_ADDRESS VARCHAR(100),
    EMP_PHONE VARCHAR(15),
    EMP_DOB DATE,
    EMP_TITLE VARCHAR(50) NOT NULL,
    TYPE VARCHAR(20),
    MANAGER_ID INT,
    CONSTRAINT FK_EMPLOYEE_MANAGER
        FOREIGN KEY (MANAGER_ID)
        REFERENCES EMPLOYEE(EMP_ID)
);


CREATE TABLE JOB_TITLE ( --WORKS
    EMP_TITLE VARCHAR(50) PRIMARY KEY,
    JOB_DESC VARCHAR(255),
    JOB_SALARY DECIMAL(10, 2)
);

CREATE TABLE EMPLOYMENT_HISTORY_BRIDGE ( --WORKS
    EMP_ID INT,
    EMP_TITLE VARCHAR(50),
    START_DATE DATE,
    END_DATE DATE,
    SALARY DECIMAL(10, 2),
    PRIMARY KEY (EMP_ID, START_DATE),
    FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE (EMP_ID),
    FOREIGN KEY (EMP_TITLE) REFERENCES JOB_TITLE (EMP_TITLE)
);

CREATE TABLE SALARY ( --WORKS
    EMP_ID INT PRIMARY KEY,
    BASE_SALARY DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE (EMP_ID)
);


CREATE TABLE WAGE ( --WORKS
    EMP_ID INT PRIMARY KEY,
    HOURLY_RATE DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE (EMP_ID)
);

--D TYPE RELATIONSHIP
CREATE TRIGGER trg_disjoint_salary_wage
ON SALARY
AFTER INSERT
AS
BEGIN
    IF EXISTS (SELECT 1 FROM WAGE WHERE WAGE.EMP_ID = (SELECT EMP_ID FROM inserted))
    BEGIN
        ROLLBACK;
        RAISERROR ('Employee already has a wage entry', 16, 1);
    END
END;
GO

CREATE TRIGGER trg_disjoint_wage_salary
ON WAGE
AFTER INSERT
AS
BEGIN
    IF EXISTS (SELECT 1 FROM SALARY WHERE SALARY.EMP_ID = (SELECT EMP_ID FROM inserted))
    BEGIN
        ROLLBACK;
        RAISERROR ('Employee already has a salary entry', 16, 1);
    END
END;
GO

CREATE TABLE [SHIFT] ( --WORKS
    [SHIFT_ID] INT PRIMARY KEY,
    [SHIFT_START] DATETIME,
    [SHIFT_END] DATETIME,
    [BREAK] VARCHAR(50)
);

CREATE TABLE [CLOCK_IN_BRIDGE] ( --WORKS
    [SHIFT_ID] INT,
    [EMP_ID] INT,
    [START_TIME] DATETIME,
    [END_TIME] DATETIME,
    PRIMARY KEY ([SHIFT_ID], [EMP_ID]),
    FOREIGN KEY ([SHIFT_ID]) REFERENCES [SHIFT]([SHIFT_ID]),
    FOREIGN KEY ([EMP_ID]) REFERENCES WAGE(EMP_ID)
);

CREATE TABLE CHEF ( --WORKS
    EMP_ID INT PRIMARY KEY,
    FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE (EMP_ID)
);

CREATE TABLE MANAGER ( --WORKS
    EMP_ID INT PRIMARY KEY,
    FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE (EMP_ID)
);

--D TYPE RELATIONSHIP
CREATE TRIGGER trg_disjoint_salary_manager
ON SALARY
AFTER INSERT
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM MANAGER WHERE MANAGER.EMP_ID = (SELECT EMP_ID FROM inserted)) AND 
       NOT EXISTS (SELECT 1 FROM CHEF WHERE CHEF.EMP_ID = (SELECT EMP_ID FROM inserted))
    BEGIN
        ROLLBACK;
        RAISERROR ('Only Managers or Chefs can have salary entries', 16, 1);
    END
END;
GO

CREATE TRIGGER trg_disjoint_manager_salary
ON MANAGER
AFTER INSERT
AS
BEGIN
    IF EXISTS (SELECT 1 FROM CHEF WHERE CHEF.EMP_ID = (SELECT EMP_ID FROM inserted)) OR
       EXISTS (SELECT 1 FROM SALARY WHERE SALARY.EMP_ID = (SELECT EMP_ID FROM inserted))
    BEGIN
        ROLLBACK;
        RAISERROR ('Employee cannot be both a Manager and a Chef', 16, 1);
    END
END;
GO

CREATE TRIGGER trg_disjoint_chef_salary
ON CHEF
AFTER INSERT
AS
BEGIN
    IF EXISTS (SELECT 1 FROM MANAGER WHERE MANAGER.EMP_ID = (SELECT EMP_ID FROM inserted)) OR
       EXISTS (SELECT 1 FROM SALARY WHERE SALARY.EMP_ID = (SELECT EMP_ID FROM inserted))
    BEGIN
        ROLLBACK;
        RAISERROR ('Employee cannot be both a Chef and a Manager', 16, 1);
    END
END;
GO

CREATE TABLE [CHEF_CRED_BRIDGE] ( --WORKS
    [EMP_ID] INT,
    [CERT_ID] INT,
    [EXAM_DATE] DATE,
    [CERT_EXP_DATE] DATE,
    PRIMARY KEY ([EMP_ID], [CERT_ID]),
    FOREIGN KEY ([EMP_ID]) REFERENCES CHEF(EMP_ID),
    FOREIGN KEY ([CERT_ID]) REFERENCES CHEF_CERT(CERT_ID)
);


CREATE TABLE [CHEF_CERT] ( --WORKS
  [CERT_ID] INT,
  [CERT_FEE] DECIMAL(10, 2),
  [CERT_DATE_OFFER] DATE,
  PRIMARY KEY ([CERT_ID])
);


CREATE TABLE [MAN_CERT] ( --WORKS
  [CERT_ID] INT,
  [CERT_FEE] DECIMAL(10, 2),
  [CERT_DATE_OFFER] DATE,
  PRIMARY KEY ([CERT_ID])
);

CREATE TABLE [MAN_CRED_BRIDGE] ( --WORKS
  [EMP_ID] INT,
  [CERT_ID] INT,
  [EXAM_DATE] DATE,
  [CERT_EXP_DATE] DATE,
  PRIMARY KEY ([EMP_ID], [CERT_ID]),
  FOREIGN KEY ([EMP_ID]) REFERENCES MANAGER(EMP_ID),
  FOREIGN KEY ([CERT_ID]) REFERENCES MAN_CERT(CERT_ID)
);

CREATE TABLE [ORDER] ( --WORKS
  [ORD_ID] INT,
  [CUST_ID] INT,
  [EMP_ID] INT,
  [ORD_DATE] DATE,
  [ORD_TOTAL] DECIMAL(10, 2),
  PRIMARY KEY ([ORD_ID]),
  FOREIGN KEY ([EMP_ID]) REFERENCES EMPLOYEE(EMP_ID)
);

CREATE TABLE ORDER_DETAIL ( --WORKS
  ORD_DET_ID INT,
  ORD_ID INT,
  PROD_ID INT,
  ORD_PRICE DECIMAL(10, 2),
  PRIMARY KEY (ORD_DET_ID),
  FOREIGN KEY (ORD_ID) REFERENCES [ORDER](ORD_ID),
  FOREIGN KEY (PROD_ID) REFERENCES PRODUCT(PROD_ID)
);

CREATE TABLE STAGES ( --WORKS
  STAGE_ID INT,
  [DESC] VARCHAR(255),
  PRIMARY KEY (STAGE_ID)
);

CREATE TABLE ORDER_CURR_STAGE_BRIDGE ( --WORKS
  STAGE_ID INT,
  ORD_ID INT,
  DETAIL_ID INT,
  PRIMARY KEY (STAGE_ID, ORD_ID, DETAIL_ID),
  FOREIGN KEY (STAGE_ID) REFERENCES STAGES(STAGE_ID),
  FOREIGN KEY (ORD_ID) REFERENCES [ORDER](ORD_ID),
  FOREIGN KEY (DETAIL_ID) REFERENCES ORDER_DETAIL(ORD_DET_ID)
);

CREATE TABLE PRODUCT ( --WORKS
    PROD_ID INT,
    PROD_PRICE DECIMAL(10, 2),
    SERV_SIZE INT,
    PROD_SUBCAT_ID INT,
    PRIMARY KEY (PROD_ID),
    FOREIGN KEY (PROD_SUBCAT_ID) REFERENCES PROD_SUBCATEGORY(PROD_SUBCAT_ID)
);

CREATE TABLE PROD_SUBCATEGORY ( --WORKS
    PROD_SUBCAT_ID INT,
    PROD_SUBCAT_DESC VARCHAR(255),
    PROD_CAT_ID INT,
    PRIMARY KEY (PROD_SUBCAT_ID),
    FOREIGN KEY (PROD_CAT_ID) REFERENCES PROD_CATEGORY(PROD_CAT_ID)
);

CREATE TABLE PROD_CATEGORY ( --WORKS
    PROD_CAT_ID INT,
    PROD_CAT_DESC VARCHAR(255),
    PRIMARY KEY (PROD_CAT_ID)
);

CREATE TABLE [MEMBERSHIP] ( --WORKS
  [MEMB_ID] INT PRIMARY KEY,
  [CUST_ID] INT,
  [MEMB_POINTS] INT,
  FOREIGN KEY ([CUST_ID]) REFERENCES [CUSTOMER]([CUST_ID])
);

CREATE TABLE [CUSTOMER] ( --WORKS
  [CUST_ID] INT PRIMARY KEY,
  [CUST_FNAME] VARCHAR(50),
  [CUST_LNAME] VARCHAR(50),
  [CUST_ADDRESS] VARCHAR(255),
  [CUST_PHONE] VARCHAR(20)
);

CREATE TABLE [RATING_BRIDGE] ( --WORKS
  [RATING_ID] INT,
  [CUST_ID] INT,
  [ORD_ID] INT,
  [STAR_RAT] INT,
  [COMMENTS] TEXT,
  PRIMARY KEY ([RATING_ID], [CUST_ID], [ORD_ID]),
  FOREIGN KEY ([CUST_ID]) REFERENCES [CUSTOMER]([CUST_ID]),
  FOREIGN KEY ([ORD_ID]) REFERENCES [ORDER]([ORD_ID])
);

CREATE TABLE [PAYMENT] ( --WORKS
  [PYMT_ID] INT,
  [PYMT_METHOD] VARCHAR(50),
  [DISCOUNT_AMOUNT] DECIMAL(10, 2),
  [ORD_ID] INT,
  PRIMARY KEY ([PYMT_ID]),
  FOREIGN KEY ([ORD_ID]) REFERENCES [ORDER]([ORD_ID])
);

CREATE TABLE [PRICE_HISTORY] ( --WORKS
  [PROD_ID] INT,
  [START_DATE] DATE,
  [END_DATE] DATE,
  [PRICE] DECIMAL(10, 2),
  PRIMARY KEY ([PROD_ID], [START_DATE]),
  FOREIGN KEY ([PROD_ID]) REFERENCES [PRODUCT]([PROD_ID])
);

CREATE TABLE [VENDOR] ( --WORKS
  [VEND_ID] INT PRIMARY KEY,
  [VEND_NAME] VARCHAR(100),
  [VEND_ADDRESS] VARCHAR(255),
  [VEND_PHONE] VARCHAR(20)
);

CREATE TABLE [INVENTORY] ( --WORKS
  [INV_ID] INT PRIMARY KEY,
  [INV_QUANTITY_ON_HAND] INT,
  [INV_SUBCAT_ID] INT,
  [VEND_ID] INT,
  FOREIGN KEY ([INV_SUBCAT_ID]) REFERENCES [INVENTORY_SUBCATEGORY]([INV_SUBCAT_ID]),
  FOREIGN KEY ([VEND_ID]) REFERENCES [VENDOR]([VEND_ID])
);

CREATE TABLE [INVENTORY_SUBCATEGORY] ( --WORKS
  [INV_SUBCAT_ID] INT PRIMARY KEY,
  [INV_SUBCAT_DESC] VARCHAR(100),
  [INV_CAT_ID] INT,
  FOREIGN KEY ([INV_CAT_ID]) REFERENCES [INVENTORY_CATEGORY]([INV_CAT_ID])
);

CREATE TABLE [INVENTORY_CATEGORY] ( --WORKS
  [INV_CAT_ID] INT PRIMARY KEY,
  [INV_CAT_DESC] VARCHAR(100)
);

CREATE TABLE [RECIPE_BRIDGE] ( --WORKS
  [PROD_ID] INT,
  [INV_ID] INT,
  [QTY_NEED] INT,
  PRIMARY KEY ([PROD_ID], [INV_ID]),
  FOREIGN KEY ([PROD_ID]) REFERENCES [PRODUCT]([PROD_ID]),
  FOREIGN KEY ([INV_ID]) REFERENCES [INVENTORY]([INV_ID])
);





